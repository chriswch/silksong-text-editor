name: Build Tauri App

on:
  workflow_dispatch:
  push:
    branches: [main]

jobs:
  build:
    strategy:
      matrix:
        # os: [ubuntu-latest, macos-latest, windows-latest]
        os: [windows-latest] # For now, only build on Windows
    runs-on: ${{ matrix.os }}

    steps:
      # 1. Checkout repo
      - name: Checkout repo
        uses: actions/checkout@v4

      # 2. Setup tooling
      - name: Setup bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Setup uv
        uses: astral-sh/setup-uv@v6

      # 3. Cache Python runtime
      - name: Cache Python runtime
        uses: actions/cache@v4
        id: cache-python-runtime
        with:
          path: python-runtime
          key: python-runtime-${{ matrix.os }}-3.12.11

      # 4. Download Python runtime if not cached
      - name: Download Python runtime
        if: steps.cache-python-runtime.outputs.cache-hit != 'true'
        shell: bash
        run: |
          mkdir -p python-runtime
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            curl -LO https://github.com/astral-sh/python-build-standalone/releases/download/20250918/cpython-3.12.11+20250918-x86_64-unknown-linux-gnu-install_only.tar.gz
            mkdir -p python-runtime/linux-x64
            tar -xzf cpython-*.tar.gz -C python-runtime/linux-x64 --strip-components=1
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            curl -LO https://github.com/astral-sh/python-build-standalone/releases/download/20250918/cpython-3.12.11+20250918-x86_64-apple-darwin-install_only.tar.gz
            mkdir -p python-runtime/macos-x64
            tar -xzf cpython-*.tar.gz -C python-runtime/macos-x64 --strip-components=1
          elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            curl -LO https://github.com/astral-sh/python-build-standalone/releases/download/20250918/cpython-3.12.11+20250918-x86_64-pc-windows-msvc-install_only.tar.gz
            mkdir -p python-runtime/windows-x64
            tar -xzf cpython-*.tar.gz -C python-runtime/windows-x64 --strip-components=1
          fi

      # 5. Cache Python dependencies
      - name: Cache Python deps
        uses: actions/cache@v4
        with:
          path: |
            python-runtime/linux-x64/lib/python3.12/site-packages
            python-runtime/macos-x64/lib/python3.12/site-packages
            python-runtime/windows-x64/Lib/site-packages
          key: python-deps-${{ matrix.os }}-${{ hashFiles('src-python/pyproject.toml', 'src-python/uv.lock') }}

      # 6. Install Python deps into runtime
      - name: Install Python deps
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            uv pip install --python python-runtime/linux-x64/bin/python3 --target python-runtime/linux-x64/lib/python3.12/site-packages ./src-python
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            uv pip install --python python-runtime/macos-x64/bin/python3 --target python-runtime/macos-x64/lib/python3.12/site-packages ./src-python
          elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            uv pip install --python python-runtime/windows-x64/python.exe --target python-runtime/windows-x64/Lib/site-packages ./src-python
          fi

      # 7. Build Tauri app
      - name: Build Tauri app
        shell: bash
        run: |
          bun install
          bun run tauri build

      # 8. Upload installers as artifacts
      - name: Upload installers
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-installers
          path: src-tauri/target/release/bundle/**
